{"version":3,"sources":["controllers/camera.tsx","environment/hud/target.tsx","objects/ArWing/Loading.tsx","gameState.ts","objects/ArWing/index.tsx","environment/lasers/index.tsx","controllers/laser-controller.tsx","objects/Enemy/asteroid/index.tsx","gameTimer.tsx","environment/hud/score-card.tsx","components/recoil-canvas.tsx","environment/sky-box/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["CameraControls","useThree","camera","domElement","gl","controls","useRef","useFrame","current","update","ref","args","enableZoom","maxAzimuthAngle","Math","PI","maxPolarAngle","minAzimuthAngle","minPolarAngle","Target","rearTarget","frontTarget","texture","TextureLoader","load","mouse","position","y","x","attach","map","Loading","visible","rotation","color","transparent","opacity","roughness","metalness","shipPositionState","atom","key","default","enemyPositionState","z","laserPositionState","scoreState","ArWing","ship","useRecoilState","shipPosition","setShipPosition","nodes","useLoader","GLTFLoader","geometry","Default","Lasers","lasers","useRecoilValue","laser","emissive","Color","wireframe","id","LaserController","setLasers","onClick","random","velocity","Enemies","enemies","enemy","GameTimer","setEnemies","setLaserPositions","score","setScore","hitEnemies","filter","p1","p2","a","b","c","sqrt","distance","length","includes","hit","console","log","idx","Section","styled","section","ScoreCard","RecoilCanvas","children","props","RecoilBridge","useRecoilBridgeAcrossReactRoots_UNSTABLE","SkyBox","scene","CubeTextureLoader","background","App","style","intensity","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","extend","OrbitControls","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61420b28.chunk.js","sourcesContent":["import { useRef } from \"react\";\nimport {\n  useFrame,\n  useThree,\n} from \"react-three-fiber\";\n\nconst CameraControls = () => {\n    // Get a reference to the Three.js Camera, and the canvas html element.\n    // We need these to setup the OrbitControls component.\n    // https://threejs.org/docs/#examples/en/controls/OrbitControls\n    const {\n      camera,\n      gl: { domElement },\n    } = useThree();\n    // Ref to the controls, so that we can update them on every frame using useFrame\n    const controls = useRef();\n    useFrame(() => {\n        const current = controls.current as any;\n        if (current) {\n            current.update();\n        }\n    });\n\n    return <orbitControls \n                ref={controls} \n                args={[camera, domElement]}\n                enableZoom={false}\n                maxAzimuthAngle={Math.PI / 4}\n                maxPolarAngle={Math.PI}\n                minAzimuthAngle={-Math.PI / 4}\n                minPolarAngle={0}\n            />;\n  };\n\nexport default CameraControls;","// Draws two sprites in front of the ship, indicating the direction of fire.\n\nimport { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { TextureLoader } from \"three\";\n\n// Uses a TextureLoader to load transparent PNG, and sprite to render on a 2d plane facing the camera.\nfunction Target() {\n    // Create refs for the two sprites we will create.\n    const rearTarget = useRef(null);\n    const frontTarget = useRef(null);\n  \n    const loader = new TextureLoader();\n    // A png with transparency to use as the target sprite.\n    const texture = loader.load(\"target.png\");\n  \n    // Update the position of both sprites based on the mouse x and y position. The front target has a larger scalar.\n    // Its movement in both axis is exagerated since its farther in front. The end result should be the appearance that the\n    // two targets are aligned with the ship in the direction of laser fire.\n    useFrame(({ mouse }) => {\n      rearTarget.current.position.y = -mouse.y * 10;\n      rearTarget.current.position.x = -mouse.x * 30;\n  \n      frontTarget.current.position.y = -mouse.y * 20;\n      frontTarget.current.position.x = -mouse.x * 60;\n    });\n    // Return a group containing two sprites. One positioned eight units in front of the ship, and the other 16 in front.\n    // We give the spriteMaterial a map prop with the loaded sprite texture as a value/\n    return (\n      <group>\n        <sprite position={[0, 0, -8]} ref={rearTarget}>\n          <spriteMaterial attach=\"material\" map={texture} />\n        </sprite>\n        <sprite position={[0, 0, -16]} ref={frontTarget}>\n          <spriteMaterial attach=\"material\" map={texture} />\n        </sprite>\n      </group>\n    );\n  };\n\n  export default Target;","import React from \"react\";\n\nfunction Loading() {\n    return (\n      <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]}>\n        <sphereGeometry attach=\"geometry\" args={[1, 16, 16]} />\n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"white\"\n          transparent\n          opacity={0.6}\n          roughness={1}\n          metalness={0}\n        />\n      </mesh>\n    );\n  }\n\n  export default Loading;","import { atom } from \"recoil\";\n\ninterface Point {\n    x: number,\n    y: number,\n    z?: number\n};\n\n\n\nexport const shipPositionState = atom({\n    key: \"shipPosition\", // unique ID (with respect to other atoms/selectors)\n    default: { position: {} as Point, rotation: {} as Point }, // default value (aka initial value)\n});\n\nexport const enemyPositionState = atom({\n    key: \"enemyPosition\", // unique ID (with respect to other atoms/selectors)\n    default: [\n        { x: -10, y: 10, z: -80 },\n        { x: 20, y: 0, z: -100 },\n        { x: 30, y: 0, z: -60 },\n        { x: 50, y: 0, z: -20 },\n    ], // default value (aka initial value)\n});\n\nexport const laserPositionState = atom({\n    key: \"laserPositions\", // unique ID (with respect to other atoms/selectors)\n    default: [], // default value (aka initial value)\n});\n\nexport const scoreState = atom({\n    key: \"score\", // unique ID (with respect to other atoms/selectors)\n    default: 0, // default value (aka initial value)\n});","import React, { FC, useRef } from 'react';\nimport { useFrame, useLoader } from 'react-three-fiber';\nimport { useRecoilState } from 'recoil';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { shipPositionState } from \"../../gameState\";\n\n\ninterface ArWingProps {\n}\n\nconst ArWing : FC<ArWingProps> = () => {\n    const ship = useRef(null);\n    const [shipPosition, setShipPosition] = useRecoilState(shipPositionState);\n\n    const scene = useLoader(GLTFLoader, \"./models/arwing.glb\");\n    const nodes = (scene as unknown as any).nodes;\n\n    useFrame(({ mouse }) => {\n        setShipPosition({\n            position: { x: mouse.x * 6, y: mouse.y * 2 },\n            rotation: { z: -mouse.x * 0.5, x: -mouse.x * 0.5, y: -mouse.y * 0.2 },\n        });\n    });\n\n    useFrame(() => {\n        ship.current.rotation.z = shipPosition.rotation.z;\n        ship.current.rotation.y = shipPosition.rotation.x;\n        ship.current.rotation.x = shipPosition.rotation.y;\n        ship.current.position.y = shipPosition.position.y;\n        ship.current.position.x = shipPosition.position.x;\n    });\n\n    return (\n        <group ref={ship}>\n        <mesh visible geometry={nodes.Default.geometry}>\n            <meshStandardMaterial\n            attach=\"material\"\n            color=\"white\"\n            roughness={0.3}\n            metalness={0.3}\n            />\n        </mesh>\n        </group>\n    );\n}\n\nexport default ArWing;","import { laserPositionState } from \"gameState\";\nimport { useRecoilValue } from \"recoil\";\nimport { Color } from \"three\";\n\n// Draws all of the lasers existing in state.\nfunction Lasers() {\n    const lasers = useRecoilValue(laserPositionState);\n    return (\n      <group>\n        {lasers.map((laser) => (\n          <mesh position={[laser.x, laser.y, laser.z]} key={`${laser.id}`}>\n            <sphereBufferGeometry attach=\"geometry\" args={[0.25, 16, 16]} />\n            <meshStandardMaterial attach=\"material\" emissive={new Color(\"white\")} wireframe />\n          </mesh>\n        ))}\n      </group>\n    );\n  }\n\n  export default Lasers;","// An invisible clickable element in the front of the scene.\n\nimport { shipPositionState, laserPositionState } from \"gameState\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\nimport { Color } from \"three\";\n\n// Manages creating lasers with the correct initial velocity on click.\nfunction LaserController() {\n    const shipPosition = useRecoilValue(shipPositionState);\n    const [lasers, setLasers] = useRecoilState(laserPositionState);\n    return (\n      <mesh\n        position={[0, 0, -8]}\n        onClick={() =>\n          setLasers([\n            ...lasers,\n            {\n              id: Math.random(),\n              x: 0,\n              y: 0,\n              z: 0,\n              velocity: [\n                shipPosition.rotation.x * 6,\n                shipPosition.rotation.y * 5,\n              ],\n            },\n          ])\n        }\n      >\n        <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"orange\"\n          emissive={ new Color(\"#ff0860\") }\n          visible={false}\n        />\n      </mesh>\n    );\n  }\n\n  export default LaserController;","import { enemyPositionState } from \"gameState\";\nimport { useRecoilValue } from \"recoil\";\n\n// Manages Drawing enemies that currently exist in state\nfunction Enemies() {\n    const enemies = useRecoilValue(enemyPositionState);\n    return (\n      <group>\n        {enemies.map((enemy) => (\n          <mesh position={[enemy.x, enemy.y, enemy.z]} key={`${enemy.x}`}>\n            <sphereBufferGeometry attach=\"geometry\" args={[2, 8, 8]} />\n            <meshStandardMaterial attach=\"material\" color=\"white\" wireframe />\n          </mesh>\n        ))}\n      </group>\n    );\n  }\n\n  export default Enemies;\n  ","// A helper function to calculate the distance between two points in 3d space.\n\nimport { enemyPositionState, laserPositionState, scoreState } from \"gameState\";\nimport { useFrame } from \"react-three-fiber\";\nimport { useRecoilState } from \"recoil\";\n\n// Game settings.\nconst LASER_RANGE = 100;\nconst LASER_Z_VELOCITY = 1;\nconst ENEMY_SPEED = 0.1;\nconst GROUND_HEIGHT = -50;\n\n// Used to detect lasers intersecting with enemies.\nfunction distance(p1, p2) {\n    const a = p2.x - p1.x;\n    const b = p2.y - p1.y;\n    const c = p2.z - p1.z;\n  \n    return Math.sqrt(a * a + b * b + c * c);\n  }\n  \n  // This component runs game logic on each frame draw to update game state.\n  function GameTimer() {\n    const [enemies, setEnemies] = useRecoilState(enemyPositionState);\n    const [lasers, setLaserPositions] = useRecoilState(laserPositionState);\n    const [score, setScore] = useRecoilState(scoreState);\n  \n    useFrame(({ mouse }) => {\n      // Map through all of the enemies in state. Detect if each enemy is within one unit of a laser if they are set that place in the return array to true.\n      // The result will be an array where each index is either a hit enemy or an unhit enemy.\n      const hitEnemies = enemies\n        ? enemies.map(\n            (enemy) =>\n              lasers.filter(\n                (laser) =>\n                  lasers.filter((laser) => distance(laser, enemy) < 3).length > 0\n              ).length > 0\n          )\n        : [];\n  \n      if (hitEnemies.includes(true) && enemies.length > 0) {\n        setScore(score + hitEnemies.filter((hit) => hit).length);\n        console.log(\"hit detected\");\n      }\n  \n      // Move all of the enemies. Remove enemies that have been destroyed, or that have passed the player.\n      setEnemies(\n        enemies\n          .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z + ENEMY_SPEED }))\n          .filter((enemy, idx) => !hitEnemies[idx] && enemy.z < 0)\n      );\n      // Move the Lasers and remove lasers at end of range or that have hit the ground.\n      setLaserPositions(\n        lasers\n          .map((laser) => ({\n            id: laser.id,\n            x: laser.x + laser.velocity[0],\n            y: laser.y + laser.velocity[1],\n            z: laser.z - LASER_Z_VELOCITY,\n            velocity: laser.velocity,\n          }))\n          .filter((laser) => laser.z > -LASER_RANGE && laser.y > GROUND_HEIGHT)\n      );\n    });\n    \n    return null;\n  }\n\n  export default GameTimer;","import { scoreState } from \"gameState\";\nimport React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n    position: absolute;\n    top: 30px;\n    right: 30px;\n    z-index: 1000;\n    color: #FFF;\n`;\n\nconst ScoreCard = () => {\n    const score = useRecoilValue(scoreState);\n\n    return (\n        <Section>\n            Score: {score*1000}\n        </Section>\n    )\n};\n\nexport default ScoreCard;","import React from \"react\";\nimport { useRecoilBridgeAcrossReactRoots_UNSTABLE } from \"recoil\";\nimport { Canvas } from \"react-three-fiber\";\n\nconst RecoilCanvas = ({ children, ...props}) => {\n  const RecoilBridge = useRecoilBridgeAcrossReactRoots_UNSTABLE();\n\n  return (\n    <Canvas {...props}>\n      <RecoilBridge>\n        {children}\n      </RecoilBridge>\n    </Canvas>\n  );\n}\n\nexport default RecoilCanvas;","import { useThree } from \"react-three-fiber\";\nimport { CubeTextureLoader } from \"three\";\n\nfunction SkyBox() {\n  const { scene } = useThree();\n  const loader = new CubeTextureLoader();\n  // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\n  const texture = loader.load([\n    \"./env/space/1.jpg\",\n    \"./env/space/2.jpg\",\n    \"./env/space/3.jpg\",\n    \"./env/space/4.jpg\",\n    \"./env/space/5.jpg\",\n    \"./env/space/6.jpg\",\n  ]);\n  // Set the scene background property to the resulting texture.\n  scene.background = texture;\n  return null;\n};\n\nexport default SkyBox;","import CameraControls from \"controllers/camera\";\nimport Target from \"environment/hud/target\";\nimport Terrain from \"environment/terrain\";\nimport Loading from \"objects/ArWing/Loading\";\nimport React, { Suspense } from \"react\";\nimport ArWing from './objects/ArWing';\nimport { RecoilRoot } from \"recoil\";\n\nimport \"./styles.css\";\nimport Lasers from \"environment/lasers\";\nimport LaserController from \"controllers/laser-controller\";\nimport Enemies from \"objects/Enemy/asteroid\";\nimport GameTimer from \"gameTimer\";\nimport ScoreCard from \"environment/hud/score-card\";\nimport RecoilCanvas from \"components/recoil-canvas\";\nimport SkyBox from \"environment/sky-box\";\n\n\nexport default function App() {\n  return (\n      <RecoilRoot>\n        <ScoreCard />\n        <RecoilCanvas style={{ background: \"#171717\" }}>\n          <CameraControls />\n          <directionalLight intensity={0.5} />\n          <Suspense fallback={<Loading />}>\n            <ArWing />\n          </Suspense>\n          <Target />\n          <Lasers />\n          <SkyBox />\n          <LaserController />\n          <Enemies />\n          <GameTimer />\n        </RecoilCanvas>\n      </RecoilRoot>\n  );\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { extend } from \"react-three-fiber\";\n\nextend({ OrbitControls });\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}