{"version":3,"sources":["environment/hud/target.tsx","environment/terrain/index.tsx","gameState.ts","environment/lasers/index.tsx","controllers/laser-controller.tsx","objects/ArWing/Loading.tsx","objects/Enemy/creepy-face/index.tsx","objects/Enemy/asteroid/index.tsx","gameTimer.tsx","environment/hud/score-card.tsx","objects/event-logger/index.tsx","components/recoil-canvas.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Target","rearTarget","useRef","frontTarget","rightController","useController","console","log","texture","TextureLoader","load","useFrame","mouse","current","position","y","x","ref","attach","map","Terrain","terrain","visible","rotation","Math","PI","args","color","roughness","metalness","wireframe","shipPositionState","atom","key","default","enemyPositionState","z","laserPositionState","scoreState","Lasers","lasers","useRecoilValue","laser","emissive","Color","id","LaserController","shipPosition","useRecoilState","setLasers","onClick","random","velocity","Loading","transparent","opacity","CreepyFace","model","nodes","useLoader","GLTFLoader","geometry","Enemies","enemies","enemy","fallback","GameTimer","setEnemies","setLaserPositions","score","setScore","hitEnemies","filter","p1","p2","a","b","c","sqrt","distance","length","includes","hit","idx","XREventType","Section","styled","section","ScoreCard","RecoilCanvas","children","props","RecoilBridge","useRecoilBridgeAcrossReactRoots_UNSTABLE","logger","debug","EventLogger","useCallback","extend","useXREvent","select","selectstart","selectend","squeeze","squeezestart","squeezeend","App","style","background","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f22e745d.chunk.js","sourcesContent":["// Draws two sprites in front of the ship, indicating the direction of fire.\n\nimport { useController } from \"@react-three/xr\";\nimport { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { TextureLoader } from \"three\";\n\n// Uses a TextureLoader to load transparent PNG, and sprite to render on a 2d plane facing the camera.\nfunction Target() {\n    // Create refs for the two sprites we will create.\n    const rearTarget = useRef(null);\n    const frontTarget = useRef(null);\n\n    const rightController = useController('right');\n\n    console.log(rightController);\n  \n    const loader = new TextureLoader();\n    // A png with transparency to use as the target sprite.\n    const texture = loader.load(\"target.png\");\n  \n    // Update the position of both sprites based on the mouse x and y position. The front target has a larger scalar.\n    // Its movement in both axis is exagerated since its farther in front. The end result should be the appearance that the\n    // two targets are aligned with the ship in the direction of laser fire.\n    useFrame(({ mouse }) => {\n      rearTarget.current.position.y = mouse.y * 10;\n      rearTarget.current.position.x = mouse.x * 30;\n  \n      frontTarget.current.position.y = mouse.y * 20;\n      frontTarget.current.position.x = mouse.x * 60;\n    });\n    // Return a group containing two sprites. One positioned eight units in front of the ship, and the other 16 in front.\n    // We give the spriteMaterial a map prop with the loaded sprite texture as a value/\n    return (\n      <group>\n        <sprite position={[0, 0, -8]} ref={rearTarget}>\n          <spriteMaterial attach=\"material\" map={texture} />\n        </sprite>\n        <sprite position={[0, 0, -16]} ref={frontTarget}>\n          <spriteMaterial attach=\"material\" map={texture} />\n        </sprite>\n      </group>\n    );\n  };\n\n  export default Target;","import { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\n\nconst GROUND_HEIGHT = -50; // A Constant to store the ground height of the game.\n\n// A Ground plane that moves relative to the player. The player stays at 0,0\nfunction Terrain() {\n    const terrain = useRef(null);\n\n    return (\n        <mesh\n            visible\n            position={[0, GROUND_HEIGHT, 0]}\n            rotation={[-Math.PI / 2, 0, 0]}\n            ref={terrain}\n        >\n            <planeBufferGeometry attach=\"geometry\" args={[5000, 5000, 128, 128]} />\n            <meshStandardMaterial\n                attach=\"material\"\n                color=\"white\"\n                roughness={1}\n                metalness={0}\n                wireframe\n            />\n        </mesh>\n    );\n}\n\nexport default Terrain","import { atom } from \"recoil\";\n\ninterface Point {\n    x: number,\n    y: number,\n    z?: number\n};\n\nexport const shipPositionState = atom({\n    key: \"shipPosition\", // unique ID (with respect to other atoms/selectors)\n    default: { position: {} as Point, rotation: {} as Point }, // default value (aka initial value)\n});\n\nexport const playerPositionState = atom({\n    key: \"playerPosition\",\n    default: { position: {} as Point, rotation: {} as Point }, // default value (aka initial value)\n})\n\nexport const enemyPositionState = atom({\n    key: \"enemyPosition\", // unique ID (with respect to other atoms/selectors)\n    default: [\n        { x: -10, y: 10, z: -80 },\n        { x: 20, y: 0, z: -100 },\n        { x: 30, y: 0, z: -60 },\n        { x: 50, y: 0, z: -20 },\n    ], // default value (aka initial value)\n});\n\nexport const laserPositionState = atom({\n    key: \"laserPositions\", // unique ID (with respect to other atoms/selectors)\n    default: [], // default value (aka initial value)\n});\n\nexport const scoreState = atom({\n    key: \"score\", // unique ID (with respect to other atoms/selectors)\n    default: 0, // default value (aka initial value)\n});","import { laserPositionState } from \"gameState\";\nimport { useRecoilValue } from \"recoil\";\nimport { Color } from \"three\";\n\n// Draws all of the lasers existing in state.\nfunction Lasers() {\n    const lasers = useRecoilValue(laserPositionState);\n    return (\n      <group>\n        {lasers.map((laser) => (\n          <mesh position={[laser.x, laser.y, laser.z]} key={`${laser.id}`}>\n            <sphereBufferGeometry attach=\"geometry\" args={[0.25, 16, 16]} />\n            <meshStandardMaterial attach=\"material\" emissive={new Color(\"white\")} wireframe />\n          </mesh>\n        ))}\n      </group>\n    );\n  }\n\n  export default Lasers;","// An invisible clickable element in the front of the scene.\n\nimport { shipPositionState, laserPositionState } from \"gameState\";\nimport { useRecoilValue, useRecoilState } from \"recoil\";\nimport { Color } from \"three\";\n\n// Manages creating lasers with the correct initial velocity on click.\nfunction LaserController() {\n    const shipPosition = useRecoilValue(shipPositionState);\n    const [lasers, setLasers] = useRecoilState(laserPositionState);\n    return (\n      <mesh\n        position={[0, 0, -8]}\n        onClick={() =>\n          setLasers([\n            ...lasers,\n            {\n              id: Math.random(),\n              x: 0,\n              y: 0,\n              z: 0,\n              velocity: [\n                shipPosition.rotation.x * 6,\n                shipPosition.rotation.y * 5,\n              ],\n            },\n          ])\n        }\n      >\n        <planeBufferGeometry attach=\"geometry\" args={[100, 100]} />\n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"orange\"\n          emissive={ new Color(\"#ff0860\") }\n          visible={false}\n        />\n      </mesh>\n    );\n  }\n\n  export default LaserController;","import React from \"react\";\n\nfunction Loading() {\n    return (\n      <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]}>\n        <sphereGeometry attach=\"geometry\" args={[1, 16, 16]} />\n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"white\"\n          transparent\n          opacity={0.6}\n          roughness={1}\n          metalness={0}\n        />\n      </mesh>\n    );\n  }\n\n  export default Loading;","import { shipPositionState } from \"gameState\";\nimport { FC, useRef } from \"react\";\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport { useRecoilState } from \"recoil\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\ninterface CreepyFaceProps {\n    position: {\n        x: number,\n        y: number,\n        z: number\n    }\n};\n\nconst CreepyFace : FC<CreepyFaceProps> = ({ position }) => {\n    const model = useRef(null);\n\n    const scene = useLoader(GLTFLoader, \"./models/creepy-face.glb\");\n    const nodes = (scene as unknown as any).nodes;\n\n    return (\n        <group ref={model} position={[position.x, position.y, position.z]}>\n        <mesh visible geometry={nodes['Quad_Sphere'].geometry}>\n            <meshStandardMaterial\n            attach=\"material\"\n            color=\"white\"\n            roughness={0.3}\n            metalness={0.3}\n            />\n        </mesh>\n        </group>\n    );\n}\n\nexport default CreepyFace;","import { enemyPositionState } from \"gameState\";\nimport Loading from \"objects/ArWing/Loading\";\nimport React, { Suspense } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport CreepyFace from '../creepy-face';\n\n// Manages Drawing enemies that currently exist in state\nfunction Enemies() {\n  const enemies = useRecoilValue(enemyPositionState);\n  return (\n    <group>\n      {enemies.map((enemy) => (\n        <Suspense fallback={<Loading />}>\n          <CreepyFace position={enemy} key={`${enemy.x}`}></CreepyFace>\n        </Suspense>\n      ))}\n    </group>\n  );\n}\n\nexport default Enemies;\n\n\n","// A helper function to calculate the distance between two points in 3d space.\n\nimport { enemyPositionState, laserPositionState, scoreState } from \"gameState\";\nimport { useFrame } from \"react-three-fiber\";\nimport { useRecoilState } from \"recoil\";\n\n// Game settings.\nconst LASER_RANGE = 100;\nconst LASER_Z_VELOCITY = 1;\nconst ENEMY_SPEED = 0.1;\nconst GROUND_HEIGHT = -50;\n\n// Used to detect lasers intersecting with enemies.\nfunction distance(p1, p2) {\n    const a = p2.x - p1.x;\n    const b = p2.y - p1.y;\n    const c = p2.z - p1.z;\n  \n    return Math.sqrt(a * a + b * b + c * c);\n  }\n  \n  // This component runs game logic on each frame draw to update game state.\n  function GameTimer() {\n    const [enemies, setEnemies] = useRecoilState(enemyPositionState);\n    const [lasers, setLaserPositions] = useRecoilState(laserPositionState);\n    const [score, setScore] = useRecoilState(scoreState);\n  \n    useFrame(({ mouse }) => {\n      // Map through all of the enemies in state. Detect if each enemy is within one unit of a laser if they are set that place in the return array to true.\n      // The result will be an array where each index is either a hit enemy or an unhit enemy.\n      const hitEnemies = enemies\n        ? enemies.map(\n            (enemy) =>\n              lasers.filter(\n                (laser) =>\n                  lasers.filter((laser) => distance(laser, enemy) < 3).length > 0\n              ).length > 0\n          )\n        : [];\n  \n      if (hitEnemies.includes(true) && enemies.length > 0) {\n        setScore(score + hitEnemies.filter((hit) => hit).length);\n        console.log(\"hit detected\");\n      }\n  \n      // Move all of the enemies. Remove enemies that have been destroyed, or that have passed the player.\n      setEnemies(\n        enemies\n          .map((enemy) => ({ x: enemy.x, y: enemy.y, z: enemy.z }))\n          .filter((enemy, idx) => !hitEnemies[idx] && enemy.z < 0)\n      );\n      // Move the Lasers and remove lasers at end of range or that have hit the ground.\n      setLaserPositions(\n        lasers\n          .map((laser) => ({\n            id: laser.id,\n            x: laser.x + laser.velocity[0],\n            y: laser.y + laser.velocity[1],\n            z: laser.z - LASER_Z_VELOCITY,\n            velocity: laser.velocity,\n          }))\n          .filter((laser) => laser.z > -LASER_RANGE && laser.y > GROUND_HEIGHT)\n      );\n    });\n    \n    return null;\n  }\n\n  export default GameTimer;","import { scoreState } from \"gameState\";\nimport React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n    position: absolute;\n    top: 30px;\n    right: 30px;\n    z-index: 1000;\n    color: #FFF;\n`;\n\nconst ScoreCard = () => {\n    const score = useRecoilValue(scoreState);\n\n    return (\n        <Section>\n            Score: {score*1000}\n        </Section>\n    )\n};\n\nexport default ScoreCard;","import { useXREvent } from \"@react-three/xr\";\nimport { FC, useCallback, useEffect } from \"react\";\nimport debug from 'debug';\n\nconst logger = debug('ControllerEvents');\n\nenum XREventType {\n    select = 'select',\n    selectstart = 'selectstart',\n    selectend = 'selectend',\n    squeeze = 'squeeze',\n    squeezestart = 'squeezestart',\n    squeezeend = 'squeezeend'\n}\n\ninterface EventLoggerProps {}\n\nconst EventLogger : FC<EventLoggerProps> = () => {\n\n    const log = useCallback((...args) => {\n        const elogger = logger.extend\n        console.log(...args);\n    }, []);\n\n    useXREvent(XREventType.select, log);\n    useXREvent(XREventType.selectstart, log);\n    useXREvent(XREventType.selectend, log);\n    useXREvent(XREventType.squeeze, log);\n    useXREvent(XREventType.squeezestart, log);\n    useXREvent(XREventType.squeezeend, log);\n    useXREvent(XREventType.squeezeend, log);\n\n    return null;    \n}\n\nexport default EventLogger;","import React from \"react\";\nimport { useRecoilBridgeAcrossReactRoots_UNSTABLE } from \"recoil\";\nimport { VRCanvas } from '@react-three/xr'\n\n\nconst RecoilCanvas = ({ children, ...props}) => {\n  const RecoilBridge = useRecoilBridgeAcrossReactRoots_UNSTABLE();\n\n  return (\n    <VRCanvas {...props}>\n      <RecoilBridge>\n        {children}\n      </RecoilBridge>\n    </VRCanvas>\n  );\n}\n\nexport default RecoilCanvas;","import CameraControls from \"controllers/camera\";\nimport Target from \"environment/hud/target\";\nimport Terrain from \"environment/terrain\";\nimport Loading from \"objects/ArWing/Loading\";\nimport React, { Suspense } from \"react\";\nimport ArWing from './objects/ArWing';\nimport { RecoilRoot } from \"recoil\";\n\nimport \"./styles.css\";\nimport Lasers from \"environment/lasers\";\nimport LaserController from \"controllers/laser-controller\";\nimport Enemies from \"objects/Enemy/asteroid\";\nimport GameTimer from \"gameTimer\";\nimport ScoreCard from \"environment/hud/score-card\";\nimport RecoilCanvas from \"components/recoil-canvas\";\nimport SkyBox from \"environment/sky-box\";\nimport { DefaultXRControllers, Hands } from \"@react-three/xr\";\nimport EventLogger from \"objects/event-logger\";\n\n\nexport default function App() {\n  return (\n      <RecoilRoot>\n        <ScoreCard />\n        <RecoilCanvas style={{ background: \"#171717\" }}>\n          <DefaultXRControllers />\n          <Hands />\n          <directionalLight intensity={0.5} />\n          {/* <Suspense fallback={<Loading />}>\n            <ArWing />\n          </Suspense> */}\n          <Target />\n          <EventLogger />\n          <Terrain />\n          <Lasers />\n          <LaserController />\n          <Enemies />\n          <GameTimer />\n        </RecoilCanvas>\n      </RecoilRoot>\n  );\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}